version: 2.1 
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID
    parameters:
      workflow-id:
        type: string
        default: "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environment and delete s3 bucket
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install required utilities
          command: |
             yum install tar -y
             yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/build_server.yml \
              --tags project="devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      #- run:
      #    name: Add back-end ip to ansible inventory
      #    command: |
      #      aws ec2 describe-instances \
      #        --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #        --filters "Name=tag:Name,Values=devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
      #        --output text >> .circleci/ansible/inventory.txt
      #      cat .circleci/ansible/inventory.txt       
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt
          command: |
            cat .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-id: "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}"    
  deploy_app_in_kube:  
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install required utilities
          command: |
             echo "hello world"
      - add_ssh_keys:
          fingerprints: 
            - "48:67:98:14:ef:00:4f:d3:fc:94:d0:44:f5:15:da:f1"
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies 
          command: |
            apk add --update ansible
            apk add --no-cache curl
            apk add --update tar gzip
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt

            cat .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          no_output_timeout: 5m
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is --------"
            cat inventory.txt
            #export EXTERNAL_IP="18.208.184.54"
            export EXTERNAL_IP="`cat inventory.txt|grep -v web`"
            echo "external_ip=${EXTERNAL_IP}"
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i inventory.txt deploy_app.yml --extra-vars "external_ip=${EXTERNAL_IP}"
      - destroy-environment:
          workflow-id: "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" 
  switch_to_new_prod:  
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies 
          command: |
            apk add --update ansible
            apk add --no-cache curl
            apk add --update tar gzip
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: get server-ip
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt

            cat .circleci/ansible/inventory.txt
      - run:
          name: copy the new production link to s3
          no_output_timeout: 5m
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is --------"
            cat inventory.txt
            export EXTERNAL_IP="54.209.246.249"
            #export EXTERNAL_IP="`cat inventory.txt|grep -v web`"
            echo "<meta http-equiv="refresh" content="7; url='http://${EXTERNAL_IP}:8080'" />">index.html
            aws s3 cp ./index.html "s3://devops-capstone-s3 
      - destroy-environment:
          workflow-id: "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" 
  linting:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "deploy_app/requirements.txt" }}
          - v1-dependencies-  
      
      - run:
          name: "install dependencies"
          command: |
            
            python3 -m venv .devops_capstone
            source .devops_capstone/bin/activate
            cd deploy_app
            uname -a
            make install
      - save_cache:
          paths:
           - ./.devops_capstone
          key: v1-dependencies-{{ checksum "deploy_app/requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
             . .devops_capstone/bin/activate
             cd deploy_app
             make lint 
  build_docker_image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:   
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: "build docker Image"
          command: |
              cd deploy_app
              echo "Building Docker Image..."
              docker build --tag=capstoneproj /root/project/deploy_app
              echo "List Image..."
              docker image ls
      - run:
          name: "upload docker Image"
          command: |

              # Create dockerpath
              dockerpath="pramation/capstoneproj" 
              # Authenticate & tag
              echo "Docker ID and Image: $dockerpath"
              docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD && docker image tag capstoneproj $dockerpath
              # Push image to a docker repository
              docker image push $dockerpath
      - run:
          name: "Run docker Image"
          command: |
              cd deploy_app
              echo "Run Docker Image..."
              #docker run -p 8080:8080 capstoneproj 

workflows:
  default:
    jobs:
      #- linting
      #- build_docker_image: 
      #   requires: [linting]
      #- deploy-infrastructure: 
      #    requires: [build_docker_image]
      #- deploy_app_in_kube:
      #    requires: [deploy-infrastructure]
      - switch_to_new_prod

