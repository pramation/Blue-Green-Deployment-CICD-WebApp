version: 2.1 
orbs:
  slack: circleci/slack@4.9.3 

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID
    parameters:
      workflow-id:
        type: string
        default: "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environment and delete s3 bucket
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}
            #aws s3 rm s3://udapeople-project4-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            #aws s3 rb s3://udapeople-project4-${CIRCLE_WORKFLOW_ID:0:7} --force

jobs:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install required utilities
          command: |
             yum install tar -y
             yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/build_server.yml \
              --tags project="devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/inventory.txt
            cat .circleci/inventory.txt       
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/inventory.txt
          command: |
            cat .circleci/inventory.txt
      - destroy-environment:
          workflow-id: "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}"    
  nothing:  
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install required utilities
          command: |
             echo "hello world"
  build:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - run:
          name: "install dependencies2"
          command: |
              apk add --no-cache py-pip=9.0.0-r1
              apk add --no-cache python3
              pip install docker-compose==1.12.0 awscli==1.11.76       

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "deploy_app/requirements.txt" }}
          - v1-dependencies-  
      - run:
          name: "install dependencies"
          command: |
            python3 -m venv .devops_capstone
            source .devops_capstone/bin/activate
            cd deploy_app
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
           - ./.devops_capstone
          key: v1-dependencies-{{ checksum "deploy_app/requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
             . .devops_capstone/bin/activate
             cd deploy_app
             make lint 
 
workflows:
  default:
    jobs:
      - nothing
     #- deploy-infrastructure
      - build
